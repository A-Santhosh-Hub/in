<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AstroBooks - Arcane Ledger</title>
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Lucide Icons for UI elements -->
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.min.js"></script>
    <!-- Google Fonts: Outfit -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Outfit:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Custom styles to complement Tailwind */
        body {
            font-family: 'Outfit', sans-serif;
            background-color: #0c0a09; /* stone-950 */
        }
        .celestial-gradient-text {
            background: linear-gradient(90deg, #a855f7, #fde047);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .card-bg {
            background-color: rgba(23, 23, 23, 0.6); /* neutral-900 with opacity */
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .nav-link.active {
            background-color: #7e22ce; /* purple-700 */
            color: white;
            box-shadow: 0 0 15px rgba(168, 85, 247, 0.3);
        }
        /* Simple animation for modals */
        .modal-enter {
            animation: fadeIn 0.3s ease-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: scale(0.95); }
            to { opacity: 1; transform: scale(1); }
        }
        /* Toast notification animations */
        .toast-enter {
            animation: slideIn 0.5s forwards;
        }
        .toast-leave {
            animation: slideOut 0.5s forwards;
        }
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideOut {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
        }
    </style>
</head>
<body class="text-stone-300 antialiased">

    <!-- Login Page -->
    <div id="login-page" class="flex items-center justify-center h-screen bg-stone-950 bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.3),rgba(255,255,255,0))]">
        <div class="w-full max-w-md p-8 space-y-6 card-bg rounded-2xl">
            <div class="text-center">
                <i data-lucide="sparkles" class="mx-auto w-12 h-12 celestial-gradient-text"></i>
                <h2 class="mt-4 text-3xl font-bold text-white">Arcane Ledger Access</h2>
                <p class="mt-2 text-sm text-stone-400">Enter your credentials to manage the tomes.</p>
            </div>
            <form id="login-form" class="space-y-6">
                <div>
                    <label for="password" class="text-sm font-medium text-stone-300">Secret Word</label>
                    <div class="mt-1">
                        <input id="password" name="password" type="password" autocomplete="current-password" required class="block w-full px-3 py-2 bg-stone-900/50 border border-stone-700 rounded-md shadow-sm placeholder-stone-500 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm">
                    </div>
                </div>
                <div>
                    <button type="submit" class="flex justify-center w-full px-4 py-2 text-sm font-medium text-white bg-purple-600 border border-transparent rounded-md shadow-sm hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 focus:ring-offset-stone-900">
                        Unlock
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Main App -->
    <div id="app" class="hidden">
        <div class="flex h-screen bg-stone-950 bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.3),rgba(255,255,255,0))]">
            <!-- Sidebar -->
            <aside class="flex flex-col w-64 bg-stone-900 text-stone-300">
                <div class="flex items-center justify-center h-16 border-b border-stone-800">
                    <i data-lucide="book-heart" class="w-8 h-8 text-purple-400"></i>
                    <span class="ml-3 text-xl font-bold text-white">AstroBooks</span>
                </div>
                <nav class="flex-1 px-4 py-4 space-y-2">
                    <a href="#dashboard" class="nav-link flex items-center px-4 py-2 rounded-md hover:bg-stone-800">
                        <i data-lucide="layout-dashboard" class="w-5 h-5 mr-3"></i>
                        Dashboard
                    </a>
                    <a href="#books" class="nav-link flex items-center px-4 py-2 rounded-md hover:bg-stone-800">
                         <i data-lucide="book-open" class="w-5 h-5 mr-3"></i>
                        Books
                    </a>
                    <a href="#orders" class="nav-link flex items-center px-4 py-2 rounded-md hover:bg-stone-800">
                        <i data-lucide="shopping-cart" class="w-5 h-5 mr-3"></i>
                        Orders
                    </a>
                    <a href="#reports" class="nav-link flex items-center px-4 py-2 rounded-md hover:bg-stone-800">
                        <i data-lucide="file-line-chart" class="w-5 h-5 mr-3"></i>
                        Reports
                    </a>
                    <a href="#settings" class="nav-link flex items-center px-4 py-2 rounded-md hover:bg-stone-800">
                        <i data-lucide="settings" class="w-5 h-5 mr-3"></i>
                        Settings
                    </a>
                </nav>
                 <div class="p-4 mt-auto border-t border-stone-800">
                    <button id="logout-btn" class="w-full flex items-center justify-center px-4 py-2 rounded-md text-red-400 hover:bg-red-500/20 hover:text-red-300">
                        <i data-lucide="log-out" class="w-5 h-5 mr-3"></i>
                        Logout
                    </button>
                </div>
            </aside>

            <!-- Main Content -->
            <main class="flex-1 overflow-y-auto">
                <div class="p-4 sm:p-6 lg:p-8">
                    <!-- Dynamic Page Content -->
                    <div id="page-content"></div>
                </div>
                 <!-- Footer -->
                <footer class="p-4 mt-8 text-center text-sm text-stone-500 border-t border-stone-800/50">
                    Last Developed By SanStudio
                </footer>
            </main>
        </div>
    </div>
    
    <!-- Modal Container -->
    <div id="modal-container" class="hidden fixed inset-0 bg-black bg-opacity-70 z-50 flex items-center justify-center p-4"></div>

    <!-- Toast Notification Container -->
    <div id="toast-container" class="fixed top-5 right-5 z-50 w-full max-w-xs space-y-2"></div>
    
    <!-- Page Templates -->
    <template id="dashboard-template">
        <h1 class="text-3xl font-bold text-white mb-6">Dashboard</h1>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
            <div class="card-bg p-6 rounded-2xl flex items-center">
                <div class="p-3 rounded-full bg-indigo-500/20 text-indigo-400 mr-4">
                     <i data-lucide="library" class="w-6 h-6"></i>
                </div>
                <div>
                    <p class="text-sm text-stone-400">Book Types</p>
                    <p id="total-types-stat" class="text-2xl font-bold text-white">0</p>
                </div>
            </div>
            <div class="card-bg p-6 rounded-2xl flex items-center">
                <div class="p-3 rounded-full bg-purple-500/20 text-purple-400 mr-4">
                     <i data-lucide="book-marked" class="w-6 h-6"></i>
                </div>
                <div>
                    <p class="text-sm text-stone-400">Total Books (Stock)</p>
                    <p id="total-books-stat" class="text-2xl font-bold text-white">0</p>
                </div>
            </div>
             <div class="card-bg p-6 rounded-2xl flex items-center">
                <div class="p-3 rounded-full bg-green-500/20 text-green-400 mr-4">
                    <i data-lucide="check-circle" class="w-6 h-6"></i>
                </div>
                <div>
                    <p class="text-sm text-stone-400">Books Sold</p>
                    <p id="total-sold-stat" class="text-2xl font-bold text-white">0</p>
                </div>
            </div>
            <div class="card-bg p-6 rounded-2xl flex items-center">
                <div class="p-3 rounded-full bg-amber-500/20 text-amber-400 mr-4">
                    <i data-lucide="archive" class="w-6 h-6"></i>
                </div>
                <div>
                    <p class="text-sm text-stone-400">Books Remaining</p>
                    <p id="total-remaining-stat" class="text-2xl font-bold text-white">0</p>
                </div>
            </div>
            <div class="card-bg p-6 rounded-2xl flex items-center">
                <div class="p-3 rounded-full bg-sky-500/20 text-sky-400 mr-4">
                    <i data-lucide="users" class="w-6 h-6"></i>
                </div>
                <div>
                    <p class="text-sm text-stone-400">Total Orders</p>
                    <p id="total-customers-stat" class="text-2xl font-bold text-white">0</p>
                </div>
            </div>
        </div>
        <div class="mt-8">
            <h2 class="text-xl font-bold text-white mb-4">Quick Actions</h2>
            <div class="flex space-x-4">
                <button id="quick-add-book" class="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 shadow-lg shadow-purple-900/50">Add New Book</button>
                <button id="quick-add-order" class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 shadow-lg shadow-green-900/50">Place New Order</button>
            </div>
        </div>
    </template>
    
    <template id="books-template">
        <div class="flex flex-wrap justify-between items-center gap-4 mb-6">
            <h1 class="text-3xl font-bold text-white">Book Management</h1>
            <button id="add-book-btn" class="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 shadow-lg shadow-purple-900/50 flex items-center">
                <i data-lucide="plus" class="w-5 h-5 mr-2"></i>
                Add Book
            </button>
        </div>
        <div class="card-bg p-6 rounded-2xl">
            <div class="flex flex-wrap justify-between items-center gap-4 mb-4">
                <input type="text" id="book-search" placeholder="Search books..." class="block w-full max-w-xs px-3 py-2 bg-stone-900/50 border border-stone-700 rounded-md shadow-sm placeholder-stone-500 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm">
                <div>
                     <label for="low-stock-filter" class="text-sm mr-2 flex items-center">
                        <input type="checkbox" id="low-stock-filter" class="w-4 h-4 rounded bg-stone-800 border-stone-600 text-purple-600 focus:ring-purple-500">
                        <span class="ml-2">Low Stock (< 5)</span>
                    </label>
                </div>
            </div>
            <div class="overflow-x-auto">
                <table class="w-full text-sm text-left text-stone-400">
                    <thead class="text-xs text-stone-400 uppercase bg-stone-800/50">
                        <tr>
                            <th scope="col" class="px-6 py-3">#</th>
                            <th scope="col" class="px-6 py-3">Book Name</th>
                            <th scope="col" class="px-6 py-3 text-center">Total Stock</th>
                            <th scope="col" class="px-6 py-3 text-center">Sold</th>
                            <th scope="col" class="px-6 py-3 text-center">Available</th>
                            <th scope="col" class="px-6 py-3 text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="books-table-body"></tbody>
                </table>
                 <div id="books-pagination" class="flex justify-end items-center mt-4"></div>
            </div>
        </div>
    </template>

    <template id="orders-template">
         <div class="flex flex-wrap justify-between items-center gap-4 mb-6">
            <h1 class="text-3xl font-bold text-white">Order Management</h1>
            <button id="add-order-btn" class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 shadow-lg shadow-green-900/50 flex items-center">
                <i data-lucide="plus" class="w-5 h-5 mr-2"></i>
                Place Order
            </button>
        </div>
        <div class="card-bg p-6 rounded-2xl">
            <div class="mb-4 p-4 border border-stone-800 rounded-lg bg-stone-900/30">
                <h3 class="text-md font-semibold mb-2 text-white">Filter by Order Date</h3>
                <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-5 gap-4 items-end">
                    <div class="sm:col-span-2">
                        <label for="order-start-date" class="block text-sm font-medium text-stone-400">Start Date</label>
                        <input type="date" id="order-start-date" class="mt-1 block w-full px-3 py-2 bg-stone-800 border border-stone-700 rounded-md">
                    </div>
                    <div class="sm:col-span-2">
                        <label for="order-end-date" class="block text-sm font-medium text-stone-400">End Date</label>
                        <input type="date" id="order-end-date" class="mt-1 block w-full px-3 py-2 bg-stone-800 border border-stone-700 rounded-md">
                    </div>
                    <div class="flex space-x-2">
                        <button id="apply-date-filter" class="w-full px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700">Filter</button>
                        <button id="clear-date-filter" class="w-full px-4 py-2 bg-stone-600 text-white rounded-md hover:bg-stone-700">Clear</button>
                    </div>
                </div>
            </div>
             <div class="flex justify-between items-center mb-4">
                <input type="text" id="order-search" placeholder="Search orders..." class="block w-full max-w-xs px-3 py-2 bg-stone-900/50 border border-stone-700 rounded-md shadow-sm placeholder-stone-500 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm">
            </div>
            <div class="overflow-x-auto">
                <table class="w-full text-sm text-left text-stone-400">
                    <thead class="text-xs text-stone-400 uppercase bg-stone-800/50">
                        <tr>
                            <th scope="col" class="px-6 py-3">Order ID</th>
                            <th scope="col" class="px-6 py-3">Customer Name</th>
                            <th scope="col" class="px-6 py-3">Mobile</th>
                            <th scope="col" class="px-6 py-3">Book</th>
                            <th scope="col" class="px-6 py-3 text-center">Quantity</th>
                             <th scope="col" class="px-6 py-3">Ordered At</th>
                            <th scope="col" class="px-6 py-3 text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="orders-table-body"></tbody>
                </table>
                 <div id="orders-pagination" class="flex justify-end items-center mt-4"></div>
            </div>
        </div>
    </template>

    <template id="reports-template">
        <h1 class="text-3xl font-bold text-white mb-6">Reports & Export</h1>
        <div class="space-y-8">
            <div class="card-bg p-6 rounded-2xl">
                <h2 class="text-xl font-bold text-white mb-4">Book Report</h2>
                <p class="text-sm text-stone-400 mb-4">Export a full report of all books in the inventory.</p>
                <div class="flex space-x-4">
                    <button data-report="books" data-format="csv" class="export-btn px-4 py-2 bg-sky-600 text-white rounded-md hover:bg-sky-700 shadow-lg shadow-sky-900/50">Export as CSV</button>
                    <button data-report="books" data-format="json" class="export-btn px-4 py-2 bg-fuchsia-600 text-white rounded-md hover:bg-fuchsia-700 shadow-lg shadow-fuchsia-900/50">Export as JSON</button>
                </div>
            </div>
            <div class="card-bg p-6 rounded-2xl">
                <h2 class="text-xl font-bold text-white mb-4">Customer Orders Report</h2>
                 <p class="text-sm text-stone-400 mb-4">Export a detailed list of all customer orders, optionally filtered by date.</p>
                 <div class="mb-4 p-4 border border-stone-800 rounded-lg bg-stone-900/30 grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                        <label for="report-start-date" class="block text-sm font-medium text-stone-400">Start Date (Optional)</label>
                        <input type="date" id="report-start-date" class="mt-1 block w-full px-3 py-2 bg-stone-800 border-stone-700 rounded-md">
                    </div>
                    <div>
                        <label for="report-end-date" class="block text-sm font-medium text-stone-400">End Date (Optional)</label>
                        <input type="date" id="report-end-date" class="mt-1 block w-full px-3 py-2 bg-stone-800 border-stone-700 rounded-md">
                    </div>
                </div>
                <div class="flex space-x-4">
                    <button data-report="orders" data-format="csv" class="export-btn px-4 py-2 bg-sky-600 text-white rounded-md hover:bg-sky-700 shadow-lg shadow-sky-900/50">Export as CSV</button>
                    <button data-report="orders" data-format="json" class="export-btn px-4 py-2 bg-fuchsia-600 text-white rounded-md hover:bg-fuchsia-700 shadow-lg shadow-fuchsia-900/50">Export as JSON</button>
                </div>
            </div>
        </div>
    </template>
    
    <template id="settings-template">
        <h1 class="text-3xl font-bold text-white mb-6">Settings</h1>
        <div class="space-y-8">
            <div class="card-bg p-6 rounded-2xl">
                <h2 class="text-xl font-bold text-white mb-4">Change Secret Word</h2>
                <form id="change-password-form" class="space-y-4 max-w-sm">
                    <div>
                        <label for="current-password" class="text-sm font-medium text-stone-400">Current Word</label>
                        <input type="password" id="current-password" required class="mt-1 block w-full px-3 py-2 bg-stone-800 border border-stone-700 rounded-md">
                    </div>
                     <div>
                        <label for="new-password" class="text-sm font-medium text-stone-400">New Word</label>
                        <input type="password" id="new-password" required class="mt-1 block w-full px-3 py-2 bg-stone-800 border border-stone-700 rounded-md">
                    </div>
                     <div>
                        <label for="confirm-password" class="text-sm font-medium text-stone-400">Confirm New Word</label>
                        <input type="password" id="confirm-password" required class="mt-1 block w-full px-3 py-2 bg-stone-800 border border-stone-700 rounded-md">
                    </div>
                    <button type="submit" class="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 shadow-lg">Update Secret Word</button>
                </form>
            </div>
             <div class="card-bg p-6 rounded-2xl border-2 border-red-500/50">
                <h2 class="text-xl font-bold text-red-400 mb-4">Danger Zone</h2>
                <p class="text-sm text-stone-400 mb-4">This action is irreversible. All your book and order data will be permanently deleted.</p>
                <button id="reset-data-btn" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 shadow-lg shadow-red-900/50">Reset All Data</button>
            </div>
        </div>
    </template>

    <script>
        document.addEventListener('DOMContentLoaded', () => {

            // --- App State & Constants ---
            const state = {
                currentPage: 'dashboard',
                loggedIn: false,
                editingBookId: null,
                bookCurrentPage: 1,
                orderCurrentPage: 1,
                itemsPerPage: 10,
            };
            const initialPassword = 'Alp@5656';
            const storageKeys = {
                BOOKS: 'bm_books',
                ORDERS: 'bm_orders',
                SETTINGS: 'bm_settings',
            };
            
            // --- DOM Elements ---
            const loginPage = document.getElementById('login-page');
            const appPage = document.getElementById('app');
            const loginForm = document.getElementById('login-form');
            const pageContent = document.getElementById('page-content');
            const modalContainer = document.getElementById('modal-container');
            const toastContainer = document.getElementById('toast-container');
            const navLinks = document.querySelectorAll('.nav-link');
            const logoutBtn = document.getElementById('logout-btn');

            // --- Storage Helpers ---
            const storage = {
                read: (key) => JSON.parse(localStorage.getItem(key) || 'null'),
                write: (key, value) => localStorage.setItem(key, JSON.stringify(value)),
                init: async () => {
                    if (!storage.read(storageKeys.SETTINGS)) {
                        const hashedPass = await simpleHash(initialPassword);
                        storage.write(storageKeys.SETTINGS, {
                            adminHash: hashedPass,
                            nextBookId: 3,
                            nextOrderId: 2,
                        });
                    }
                    if (!storage.read(storageKeys.BOOKS)) {
                        storage.write(storageKeys.BOOKS, [
                            { id: 'b_1', name: 'The Celestial Handbook', total: 30, sold: 5, available: 25, createdAt: new Date().toISOString() },
                            { id: 'b_2', name: 'Starlight & Spells', total: 25, sold: 3, available: 22, createdAt: new Date().toISOString() },
                        ]);
                    }
                    if (!storage.read(storageKeys.ORDERS)) {
                        storage.write(storageKeys.ORDERS, [
                            { id: 'o_1', customerName: 'Ravi Kumar', mobile: '9876543210', location: 'Chennai', bookId: 'b_1', bookName: 'The Celestial Handbook', quantity: 1, createdAt: new Date().toISOString() }
                        ]);
                    }
                }
            };
            
            // --- Hashing Utility ---
            async function simpleHash(str) {
                const buffer = new TextEncoder().encode(str);
                const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);
                const hashArray = Array.from(new Uint8Array(hashBuffer));
                return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
            }
            
            // --- UI/Component Functions ---
            function showToast(message, type = 'success') {
                const isSuccess = type === 'success';
                const bgColor = isSuccess ? 'bg-green-500' : 'bg-red-500';
                const toast = document.createElement('div');
                toast.className = `toast-enter ${bgColor} text-white p-3 rounded-md shadow-lg text-sm flex items-center`;
                const icon = isSuccess ? 'check-circle' : 'alert-circle';
                toast.innerHTML = `<i data-lucide="${icon}" class="w-5 h-5 mr-2"></i> ${message}`;
                toastContainer.appendChild(toast);
                lucide.createIcons();
                
                setTimeout(() => {
                    toast.classList.remove('toast-enter');
                    toast.classList.add('toast-leave');
                    toast.addEventListener('animationend', () => toast.remove());
                }, 3000);
            }

            function showModal(content) {
                modalContainer.innerHTML = '';
                const modalContentWrapper = document.createElement('div');
                modalContentWrapper.className = 'modal-enter card-bg rounded-2xl shadow-xl p-6 w-full max-w-lg';
                modalContentWrapper.innerHTML = content;
                modalContainer.appendChild(modalContentWrapper);
                modalContainer.classList.remove('hidden');

                modalContainer.addEventListener('click', (e) => {
                    if (e.target === modalContainer) hideModal();
                });
                
                const closeButton = modalContentWrapper.querySelector('.close-modal-btn');
                if (closeButton) closeButton.addEventListener('click', hideModal);
                lucide.createIcons();
            }

            function hideModal() {
                 const modalContent = modalContainer.querySelector('div');
                if (modalContent) {
                    modalContainer.classList.add('hidden');
                    modalContainer.innerHTML = '';
                }
            }
            
            // --- Rendering Functions ---
            function renderPage(page) {
                const template = document.getElementById(`${page}-template`);
                if(template) {
                    pageContent.innerHTML = template.innerHTML;
                    state.currentPage = page;
                    updateActiveNavLink();
                    switch(page) {
                        case 'dashboard': renderDashboard(); break;
                        case 'books': renderBooksPage(); break;
                        case 'orders': renderOrdersPage(); break;
                        case 'reports': attachReportListeners(); break;
                        case 'settings': attachSettingsListeners(); break;
                    }
                    lucide.createIcons();
                }
            }

            function updateActiveNavLink() {
                navLinks.forEach(link => {
                    link.classList.toggle('active', link.hash === `#${state.currentPage}`);
                });
            }

            function renderDashboard() {
                const books = storage.read(storageKeys.BOOKS) || [];
                const orders = storage.read(storageKeys.ORDERS) || [];
                
                document.getElementById('total-types-stat').textContent = books.length;
                const totalStock = books.reduce((sum, book) => sum + book.total, 0);
                const totalSold = books.reduce((sum, book) => sum + book.sold, 0);
                
                document.getElementById('total-books-stat').textContent = totalStock;
                document.getElementById('total-sold-stat').textContent = totalSold;
                document.getElementById('total-remaining-stat').textContent = totalStock - totalSold;
                document.getElementById('total-customers-stat').textContent = orders.length;

                document.getElementById('quick-add-book').addEventListener('click', showAddBookModal);
                document.getElementById('quick-add-order').addEventListener('click', showAddOrderModal);
            }

            function renderBooksPage() {
                document.getElementById('add-book-btn').addEventListener('click', showAddBookModal);
                const searchInput = document.getElementById('book-search');
                const lowStockFilter = document.getElementById('low-stock-filter');
                searchInput.addEventListener('input', () => { state.bookCurrentPage = 1; renderBooksTable(); });
                lowStockFilter.addEventListener('change', () => { state.bookCurrentPage = 1; renderBooksTable(); });
                renderBooksTable();
            }
            
            function renderOrdersPage() {
                document.getElementById('add-order-btn').addEventListener('click', showAddOrderModal);
                document.getElementById('order-search').addEventListener('input', () => { state.orderCurrentPage = 1; renderOrdersTable(); });
                document.getElementById('apply-date-filter').addEventListener('click', () => { state.orderCurrentPage = 1; renderOrdersTable(); });
                document.getElementById('clear-date-filter').addEventListener('click', () => {
                    document.getElementById('order-start-date').value = '';
                    document.getElementById('order-end-date').value = '';
                    state.orderCurrentPage = 1;
                    renderOrdersTable();
                });
                renderOrdersTable();
            }
            
            function renderBooksTable() {
                const books = storage.read(storageKeys.BOOKS) || [];
                const searchInput = document.getElementById('book-search').value.toLowerCase();
                const lowStockFilter = document.getElementById('low-stock-filter').checked;
                
                const filteredBooks = books
                    .filter(book => book.name.toLowerCase().includes(searchInput))
                    .filter(book => !lowStockFilter || book.available < 5)
                    .sort((a, b) => a.name.localeCompare(b.name));

                const tableBody = document.getElementById('books-table-body');
                const paginatedBooks = paginate(filteredBooks, state.bookCurrentPage, state.itemsPerPage);

                tableBody.innerHTML = paginatedBooks.length === 0 
                    ? `<tr><td colspan="6" class="text-center py-8">No books found.</td></tr>`
                    : paginatedBooks.map((book, index) => {
                        const rowIndex = (state.bookCurrentPage - 1) * state.itemsPerPage + index + 1;
                        return `
                            <tr class="border-b border-stone-800 hover:bg-stone-800/70">
                                <td class="px-6 py-4">${rowIndex}</td>
                                <td class="px-6 py-4 font-medium text-white">${book.name}</td>
                                <td class="px-6 py-4 text-center">${book.total}</td>
                                <td class="px-6 py-4 text-center">${book.sold}</td>
                                <td class="px-6 py-4 text-center font-bold ${book.available < 5 ? 'text-red-400' : 'text-green-400'}">${book.available}</td>
                                <td class="px-6 py-4 text-center space-x-2">
                                    <button data-id="${book.id}" class="edit-book-btn text-purple-400 hover:text-purple-300 p-1">Edit</button>
                                    <button data-id="${book.id}" class="delete-book-btn text-red-400 hover:text-red-300 p-1">Delete</button>
                                </td>
                            </tr>`;
                    }).join('');
                
                renderPagination('books-pagination', filteredBooks.length, state.bookCurrentPage, (page) => {
                    state.bookCurrentPage = page;
                    renderBooksTable();
                });
            }

            function renderOrdersTable() {
                const orders = storage.read(storageKeys.ORDERS) || [];
                const searchInput = document.getElementById('order-search').value.toLowerCase();
                const startDate = document.getElementById('order-start-date').valueAsDate;
                if(startDate) startDate.setHours(0,0,0,0);
                const endDate = document.getElementById('order-end-date').valueAsDate;
                if(endDate) endDate.setHours(23,59,59,999);
                 
                const filteredOrders = orders
                    .filter(order => {
                        const orderDate = new Date(order.createdAt);
                        const matchesSearch = order.customerName.toLowerCase().includes(searchInput) || order.bookName.toLowerCase().includes(searchInput);
                        const matchesDate = (!startDate || orderDate >= startDate) && (!endDate || orderDate <= endDate);
                        return matchesSearch && matchesDate;
                    })
                    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

                const tableBody = document.getElementById('orders-table-body');
                const paginatedOrders = paginate(filteredOrders, state.orderCurrentPage, state.itemsPerPage);
                
                tableBody.innerHTML = paginatedOrders.length === 0
                    ? `<tr><td colspan="7" class="text-center py-8">No orders found.</td></tr>`
                    : paginatedOrders.map(order => `
                        <tr class="border-b border-stone-800 hover:bg-stone-800/70">
                            <td class="px-6 py-4 font-medium text-white">${order.id}</td>
                            <td class="px-6 py-4">${order.customerName}</td>
                            <td class="px-6 py-4">${order.mobile}</td>
                            <td class="px-6 py-4">${order.bookName}</td>
                            <td class="px-6 py-4 text-center">${order.quantity}</td>
                            <td class="px-6 py-4 text-xs">${new Date(order.createdAt).toLocaleString()}</td>
                            <td class="px-6 py-4 text-center">
                                 <button data-id="${order.id}" class="delete-order-btn text-red-400 hover:text-red-300 p-1">Delete</button>
                            </td>
                        </tr>`).join('');

                renderPagination('orders-pagination', filteredOrders.length, state.orderCurrentPage, (page) => {
                    state.orderCurrentPage = page;
                    renderOrdersTable();
                });
            }

            function paginate(items, currentPage, perPage) {
                return items.slice((currentPage - 1) * perPage, currentPage * perPage);
            }

            function renderPagination(containerId, totalItems, currentPage, onPageClick) {
                const container = document.getElementById(containerId);
                if (!container) return;
                const totalPages = Math.ceil(totalItems / state.itemsPerPage);
                container.innerHTML = totalPages <= 1 ? '' : `
                    <button id="prev-btn" class="px-3 py-1 text-sm rounded-md bg-stone-800 border border-stone-700 disabled:opacity-50 hover:bg-stone-700">Previous</button>
                    <span class="px-4 text-sm">Page ${currentPage} of ${totalPages}</span>
                    <button id="next-btn" class="px-3 py-1 text-sm rounded-md bg-stone-800 border border-stone-700 disabled:opacity-50 hover:bg-stone-700">Next</button>`;
                if (totalPages > 1) {
                    const prevBtn = document.getElementById('prev-btn');
                    const nextBtn = document.getElementById('next-btn');
                    prevBtn.disabled = currentPage === 1;
                    nextBtn.disabled = currentPage === totalPages;
                    prevBtn.onclick = () => onPageClick(currentPage - 1);
                    nextBtn.onclick = () => onPageClick(currentPage + 1);
                }
            }

            // --- Modal Content & Logic ---
            const getModalContent = (title, formId, fields, submitText, submitClass) => `
                <h2 class="text-xl font-bold text-white mb-4">${title}</h2>
                <form id="${formId}" class="space-y-4">
                    ${fields}
                    <div class="flex justify-end space-x-2 pt-4">
                        <button type="button" class="close-modal-btn px-4 py-2 bg-stone-700 rounded-md hover:bg-stone-600">Cancel</button>
                        <button type="submit" class="px-4 py-2 ${submitClass} text-white rounded-md">${submitText}</button>
                    </div>
                </form>`;

            const createField = (label, id, type, value = '', required = true, min = '', pattern = '', title = '') => `
                <div>
                    <label for="${id}" class="block text-sm font-medium text-stone-400">${label}</label>
                    <input type="${type}" id="${id}" value="${value}" ${required ? 'required' : ''} ${min ? `min="${min}"` : ''} ${pattern ? `pattern="${pattern}"` : ''} ${title ? `title="${title}"` : ''} class="mt-1 block w-full px-3 py-2 bg-stone-800 border border-stone-700 rounded-md">
                </div>`;

            function showAddBookModal() {
                state.editingBookId = null;
                const fields = createField('Book Name', 'book-name', 'text') + createField('Total Stock', 'book-total', 'number', '', true, '1');
                showModal(getModalContent('Add New Book', 'book-form', fields, 'Save Book', 'bg-purple-600 hover:bg-purple-700'));
                document.getElementById('book-form').addEventListener('submit', handleBookFormSubmit);
            }
            
            function showEditBookModal(bookId) {
                state.editingBookId = bookId;
                const book = (storage.read(storageKeys.BOOKS) || []).find(b => b.id === bookId);
                if (!book) return;

                const fields = createField('Book Name', 'book-name', 'text', book.name) + createField('Total Stock', 'book-total', 'number', book.total, true, book.sold);
                const modalContent = getModalContent('Edit Book', 'book-form', fields, 'Update Book', 'bg-purple-600 hover:bg-purple-700');
                showModal(modalContent.replace('</form>', `<p class="text-xs text-stone-500 -mt-2">Cannot be less than sold count (${book.sold}).</p></form>`));
                document.getElementById('book-form').addEventListener('submit', handleBookFormSubmit);
            }

            function showAddOrderModal() {
                 const options = (storage.read(storageKeys.BOOKS) || [])
                    .filter(b => b.available > 0)
                    .map(b => `<option value="${b.id}">${b.name} (Available: ${b.available})</option>`).join('');

                 const fields = `
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        ${createField('Customer Name', 'customer-name', 'text')}
                        ${createField('Mobile Number', 'customer-mobile', 'tel', '', true, '', '[0-9]{10}', '10-digit mobile number')}
                    </div>
                    ${createField('Location', 'customer-location', 'text')}
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div class="md:col-span-2">
                            <label for="book-id" class="block text-sm font-medium text-stone-400">Select Book</label>
                            <select id="book-id" required class="mt-1 block w-full px-3 py-2 bg-stone-800 border border-stone-700 rounded-md">
                                <option value="">-- Choose a book --</option>${options}
                            </select>
                        </div>
                        ${createField('Quantity', 'quantity', 'number', '', true, '1')}
                    </div>`;
                showModal(getModalContent('Place New Order', 'order-form', fields, 'Place Order', 'bg-green-600 hover:bg-green-700'));
                document.getElementById('order-form').addEventListener('submit', handleOrderFormSubmit);
            }

            // --- Handlers ---
            async function handleLogin(e) {
                e.preventDefault();
                const settings = storage.read(storageKeys.SETTINGS);
                if (settings && await simpleHash(e.target.password.value) === settings.adminHash) {
                    state.loggedIn = true;
                    loginPage.classList.add('hidden');
                    appPage.classList.remove('hidden');
                    renderPage(state.currentPage);
                } else {
                    showToast('Invalid secret word', 'error');
                }
            }
            
            function handleLogout() {
                state.loggedIn = false;
                appPage.classList.add('hidden');
                loginPage.classList.remove('hidden');
                loginForm.reset();
            }

            function handleBookFormSubmit(e) {
                e.preventDefault();
                const name = document.getElementById('book-name').value;
                const total = parseInt(document.getElementById('book-total').value);
                let books = storage.read(storageKeys.BOOKS) || [];

                if (state.editingBookId) {
                    const book = books.find(b => b.id === state.editingBookId);
                    if (total < book.sold) return showToast(`Total stock cannot be less than sold count (${book.sold})`, 'error');
                    book.name = name;
                    book.total = total;
                    book.available = total - book.sold;
                    showToast('Book updated successfully');
                } else {
                    let settings = storage.read(storageKeys.SETTINGS);
                    books.push({ id: `b_${settings.nextBookId}`, name, total, sold: 0, available: total, createdAt: new Date().toISOString() });
                    settings.nextBookId += 1;
                    storage.write(storageKeys.SETTINGS, settings);
                    showToast('Book added successfully');
                }
                storage.write(storageKeys.BOOKS, books);
                hideModal();
                renderPage('books');
            }

            function handleDeleteBook(bookId) {
                let books = storage.read(storageKeys.BOOKS);
                const book = books.find(b => b.id === bookId);

                const confirmAction = () => {
                    storage.write(storageKeys.BOOKS, books.filter(b => b.id !== bookId));
                    showToast('Book deleted successfully');
                    renderPage('books');
                    hideModal();
                };

                const message = book.sold > 0 
                    ? `This book has ${book.sold} copies sold. Deleting it is not recommended but possible. Proceed?` 
                    : `Are you sure you want to delete "${book.name}"?`;
                
                showModal(`
                    <h2 class="text-xl font-bold text-red-400 mb-4">Confirm Deletion</h2>
                    <p>${message}</p>
                    <div class="flex justify-end space-x-2 mt-6">
                        <button class="close-modal-btn px-4 py-2 bg-stone-700 rounded-md hover:bg-stone-600">Cancel</button>
                        <button id="confirm-delete" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">Yes, Delete</button>
                    </div>`);
                document.getElementById('confirm-delete').onclick = confirmAction;
            }

            function handleOrderFormSubmit(e) {
                e.preventDefault();
                const form = e.target.elements;
                const bookId = form['book-id'].value;
                const quantity = parseInt(form['quantity'].value);
                let books = storage.read(storageKeys.BOOKS);
                const book = books.find(b => b.id === bookId);

                if (!book) return showToast('Selected book not found.', 'error');
                if (quantity > book.available) return showToast(`Not enough stock. Only ${book.available} available.`, 'error');

                let orders = storage.read(storageKeys.ORDERS) || [];
                let settings = storage.read(storageKeys.SETTINGS);
                
                orders.push({
                    id: `o_${settings.nextOrderId}`,
                    customerName: form['customer-name'].value, mobile: form['customer-mobile'].value, location: form['customer-location'].value, 
                    bookId, quantity, bookName: book.name, createdAt: new Date().toISOString()
                });
                
                book.sold += quantity;
                book.available -= quantity;
                settings.nextOrderId += 1;

                storage.write(storageKeys.BOOKS, books);
                storage.write(storageKeys.ORDERS, orders);
                storage.write(storageKeys.SETTINGS, settings);
                
                showToast('Order placed successfully');
                hideModal();
                renderPage('orders');
            }

            function handleDeleteOrder(orderId) {
                showModal(`
                    <h2 class="text-xl font-bold text-red-400 mb-4">Confirm Deletion</h2>
                    <p>Are you sure you want to delete this order? This will restock the book.</p>
                    <div class="flex justify-end space-x-2 mt-6">
                        <button class="close-modal-btn px-4 py-2 bg-stone-700 rounded-md hover:bg-stone-600">Cancel</button>
                        <button id="confirm-delete" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">Yes, Delete</button>
                    </div>`);
                document.getElementById('confirm-delete').onclick = () => {
                    let orders = storage.read(storageKeys.ORDERS);
                    let books = storage.read(storageKeys.BOOKS);
                    const order = orders.find(o => o.id === orderId);
                    if (!order) return;
                    const book = books.find(b => b.id === order.bookId);

                    if (book) {
                        book.sold -= order.quantity;
                        book.available += order.quantity;
                        storage.write(storageKeys.BOOKS, books);
                    }
                    storage.write(storageKeys.ORDERS, orders.filter(o => o.id !== orderId));
                    showToast('Order deleted and stock updated.');
                    hideModal();
                    renderPage('orders');
                };
            }

            function attachReportListeners() {
                document.querySelectorAll('.export-btn').forEach(btn => btn.addEventListener('click', handleExport));
            }

             function handleExport(e) {
                const reportType = e.target.dataset.report;
                const format = e.target.dataset.format;
                let data = storage.read(reportType === 'books' ? storageKeys.BOOKS : storageKeys.ORDERS);

                if (reportType === 'orders') {
                    const startDate = document.getElementById('report-start-date').valueAsDate;
                    if(startDate) startDate.setHours(0,0,0,0);
                    const endDate = document.getElementById('report-end-date').valueAsDate;
                    if(endDate) endDate.setHours(23,59,59,999);
                    if (startDate || endDate) {
                        data = data.filter(order => {
                            const orderDate = new Date(order.createdAt);
                            return (!startDate || orderDate >= startDate) && (!endDate || orderDate <= endDate);
                        });
                    }
                }
                
                if (!data || data.length === 0) return showToast('No data to export for this selection.', 'error');
                
                const content = format === 'json' ? JSON.stringify(data, null, 2) :
                    reportType === 'books' ? ['Book Name,Total Stock,Sold,Remaining', ...data.map(b => [b.name, b.total, b.sold, b.available].join(','))].join('\n') :
                    ['Customer,Mobile,Location,Book,Quantity,Ordered At', ...data.map(o => [o.customerName, o.mobile, o.location, o.bookName, o.quantity, new Date(o.createdAt).toLocaleString()].join(','))].join('\n');
                
                const blob = new Blob([content], { type: format === 'json' ? 'application/json' : 'text/csv' });
                const a = document.createElement('a');
                a.href = URL.createObjectURL(blob);
                a.download = `${reportType}_report_${new Date().toISOString().slice(0,10)}.${format}`;
                a.click();
                URL.revokeObjectURL(a.href);
            }

            function attachSettingsListeners() {
                document.getElementById('change-password-form').addEventListener('submit', handleChangePassword);
                document.getElementById('reset-data-btn').addEventListener('click', handleResetData);
            }

            async function handleChangePassword(e) {
                e.preventDefault();
                const form = e.target.elements;
                const currentPassword = form['current-password'].value, newPassword = form['new-password'].value;

                if(newPassword !== form['confirm-password'].value) return showToast('New secret words do not match.', 'error');
                
                const settings = storage.read(storageKeys.SETTINGS);
                if(await simpleHash(currentPassword) !== settings.adminHash) return showToast('Incorrect current secret word.', 'error');
                
                settings.adminHash = await simpleHash(newPassword);
                storage.write(storageKeys.SETTINGS, settings);
                showToast('Secret word updated successfully.');
                e.target.reset();
            }

            function handleResetData() {
                showModal(`
                    <h2 class="text-xl font-bold text-red-400 mb-4">Confirm Data Reset</h2>
                    <p>This will delete ALL books and orders. Type <strong>RESET</strong> below to confirm.</p>
                    <input type="text" id="reset-confirm-input" class="mt-4 block w-full px-3 py-2 bg-stone-800 border border-stone-700 rounded-md">
                    <div class="flex justify-end space-x-2 mt-6">
                        <button class="close-modal-btn px-4 py-2 bg-stone-700 rounded-md hover:bg-stone-600">Cancel</button>
                        <button id="confirm-reset-btn" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:opacity-50" disabled>Confirm Reset</button>
                    </div>`);
                const confirmInput = document.getElementById('reset-confirm-input');
                const confirmBtn = document.getElementById('confirm-reset-btn');
                confirmInput.oninput = () => { confirmBtn.disabled = confirmInput.value !== 'RESET'; };
                confirmBtn.onclick = () => {
                    storage.write(storageKeys.BOOKS, []);
                    storage.write(storageKeys.ORDERS, []);
                    showToast('All data has been reset.');
                    hideModal();
                    renderPage('dashboard');
                };
            }

            // --- Event Delegation & Init ---
            pageContent.addEventListener('click', (e) => {
                const target = e.target.closest('button');
                if (!target) return;
                const id = target.dataset.id;
                if (target.classList.contains('edit-book-btn')) showEditBookModal(id);
                if (target.classList.contains('delete-book-btn')) handleDeleteBook(id);
                if (target.classList.contains('delete-order-btn')) handleDeleteOrder(id);
            });

            async function init() {
                await storage.init();
                loginForm.addEventListener('submit', handleLogin);
                logoutBtn.addEventListener('click', handleLogout);
                navLinks.forEach(link => link.addEventListener('click', (e) => renderPage(e.currentTarget.hash.substring(1))));
                lucide.createIcons();
            }

            init();
        });
    </script>
</body>
</html>


